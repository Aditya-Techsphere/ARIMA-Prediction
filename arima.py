# -*- coding: utf-8 -*-
"""ARIMA.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1khhytgYKK_6ye_5Jbuym-ijin9pEb6jV
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from statsmodels.tsa.arima.model import ARIMA

file_path = '/content/stock_data.csv'
stock_data = pd.read_csv(file_path, parse_dates=['Date'])
print("Stock Data:")
print(stock_data.head())

def add_sma(data, column_name, window):
    """
    Add Simple Moving Average (SMA) to the dataset.

    Parameters:
    - data: DataFrame, input stock data
    - column_name: str, name for the new SMA column
    - window: int, time window for SMA calculation

    Returns:
    - data: DataFrame, stock data with SMA added
    """
    data[column_name] = data['Close'].rolling(window=window).mean()
    return data

window = 50
stock_data = add_sma(stock_data, 'SMA', window)

print("\nStock Data with SMA:")
print(stock_data.head())

def generate_signals(data):
    """
    Generate trading signals based on a Simple Moving Average (SMA).

    Parameters:
    - data: DataFrame, stock data with SMA

    Returns:
    - data: DataFrame, stock data with trading signals
    """
    data['Signal'] = 0
    data['Signal'][data['Close'] > data['SMA']] = 1
    data['Signal'][data['Close'] < data['SMA']] = -1
    return data

stock_data = generate_signals(stock_data)

print("\nStock Data with Trading Signals:")
print(stock_data.head())

def apply_arima(data, column_name):
    """
    Apply ARIMA model to predict stock prices.

    Parameters:
    - data: DataFrame, input stock data
    - column_name: str, column to predict using ARIMA

    Returns:
    - data: DataFrame, stock data with ARIMA predictions
    """
    model = ARIMA(data[column_name], order=(5,1,0))
    results = model.fit()

    data['ARIMA_Predictions'] = results.predict(start=1, end=len(data)-1, typ='levels')

    return data

stock_data = apply_arima(stock_data, 'Close')

print("\nStock Data with ARIMA Predictions:")
print(stock_data.head())

def backtest_strategy_arima(data):
    """
    Backtest the trading strategy using ARIMA predictions.

    Parameters:
    - data: DataFrame, stock data with ARIMA predictions

    Returns:
    - cumulative_strategy_returns: Series, cumulative returns of the strategy
    - cumulative_market_returns: Series, cumulative returns of the market
    - positions: Series, Buy (1), Sell (-1), Hold (0)
    """
    data['Position'] = np.sign(data['ARIMA_Predictions'].diff())
    data['Position'].fillna(0, inplace=True)

    data['Market Returns'] = data['Close'].pct_change()
    data['Strategy Returns'] = data['Position'] * data['Market Returns']

    cumulative_strategy_returns = (1 + data['Strategy Returns']).cumprod()
    cumulative_market_returns = (1 + data['Market Returns']).cumprod()

    return cumulative_strategy_returns, cumulative_market_returns, data['Position']

cumulative_strategy_returns_arima, cumulative_market_returns_arima, positions = backtest_strategy_arima(stock_data)

print("\nConclusion of Buy or Sell:")
print(positions.tail())

plt.figure(figsize=(10, 6))
plt.bar(cumulative_strategy_returns_arima.index, cumulative_strategy_returns_arima, label='Strategy Returns (ARIMA)')
plt.bar(cumulative_market_returns_arima.index, cumulative_market_returns_arima, label='Market Returns')
plt.title('Backtesting Results with ARIMA Predictions')
plt.xlabel('Date')
plt.ylabel('Cumulative Returns')
plt.legend()
plt.show()

plt.figure(figsize=(12, 8))
plt.plot(stock_data['Date'], stock_data['Close'], label='Closing Prices', color='black')
plt.scatter(stock_data['Date'][positions == 1], stock_data['Close'][positions == 1], marker='^', color='g', label='Buy Signal')
plt.scatter(stock_data['Date'][positions == -1], stock_data['Close'][positions == -1], marker='v', color='r', label='Sell Signal')
plt.title('Buy/Sell Signals with Closing Prices')
plt.xlabel('Date')
plt.ylabel('Closing Prices')
plt.legend()
plt.show()